/*
 * 2. * Создать класс Figure для работы с геометрическими фигурами.
 * В качестве полей класса задаются цвет фигуры, состояние «видимое/невидимое».
 * Реализовать операции: передвижение геометрической фигуры по горизонтали,
 * по вертикали, изменение цвета, опрос состояния (видимый/невидимый).
 * Метод вывода на экран должен выводить состояние всех полей объекта.
 * Создать класс Point (точка) как потомок геометрической фигуры. 
 * Создать класс Circle (окружность) как потомок точки.
 * В класс Circle добавить метод, который вычисляет площадь окружности.
 * Создать класс Rectangle (прямоугольник) как потомок точки, реализовать метод вычисления площади прямоугольника.
 * Точка, окружность, прямоугольник должны поддерживать методы передвижения по горизонтали и вертикали, изменения цвета.
 * Подумать, какие методы можно объявить в интерфейсе, нужно ли объявлять абстрактный класс,
 * какие методы и поля будут в абстрактном классе, какие методы будут виртуальными, какие перегруженными.
 */


interface IFigure
{
    /// <summary>
    /// сестояние (видимый/невидимый) true - видимый
    /// </summary>
    bool Visible { get; set; }
    /// <summary>
    /// цвет
    /// </summary>
    uint Color { get; set; }
    /// <summary>
    /// положение по горизонтали
    /// </summary>
    int X { get; set; }
    /// <summary>
    /// положение по вертикали
    /// </summary>
    int Y { get; set; }
    /// <summary>
    /// Уствновка координат
    /// </summary>
    /// <param name="X"></param>
    /// <param name="Y"></param>
    void SetPosition(int X, int Y);
    /// <summary>
    /// перемещение по горизонтали
    /// </summary>
    /// <param name="value">величина перемещения</param>
    void MoveX(int value);
    /// <summary>
    /// перемещение по вертикали
    /// </summary>
    /// <param name="value">величина перемещения</param>
    void MoveY(int value);
    /// <summary>
    /// вывод состояния полей объекта
    /// </summary>
    void Draw();
    /// <summary>
    /// площадь фигуры
    /// </summary>
    /// <returns></returns>
    double Area();
    /// <summary>
    /// событие "изменение видимости объекта"
    /// </summary>
    event EventHandler OnVisibleChanged;
    /// <summary>
    /// событие "изменение цвета объекта"
    /// </summary>
    event EventHandler OnColorChanged;
    /// <summary>
    /// событие "изменение положения объекта"
    /// </summary>
    event EventHandler OnPositionChange;
    /// <summary>
    /// метод для вызова события OnVisibleChanged - изменение свойства видимости
    /// </summary>
    void DoVisibleChange();
    /// <summary>
    /// метод для вызова события OnColourChanged - изменение цвета
    /// </summary>
    void DoColorChange();
    /// <summary>
    /// метод для вызова события OnPositionChange - изменение положения
    /// </summary>
    void DoPositionChange();
}